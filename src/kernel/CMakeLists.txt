cmake_minimum_required(VERSION 3.10)
project(kernel NONE)
#include(../../toolchain.cmake)

FUNCTION(LOAD_PROFILE ISA PLATFORM)
    # Obtain sources for the ISA
    FILE(GLOB ISA_SRCS "${ISA}/*.c" "${ISA}/*.s")
    FILE(GLOB PLATFORM_SRCS "${ISA}/${PLATFORM}/*.c" "${ISA}/${PLATFORM}/*.s")

    # Load flags associated with ISA and Profile
    INCLUDE("${ISA}/flags.cmake")
    INCLUDE("${ISA}/${PLATFORM}/flags.cmake")

    # Now export our output variables
    SET(ISA_SRCS ${ISA_SRCS} PARENT_SCOPE)
    SET(PLATFORM_SRCS ${PLATFORM_SRCS} PARENT_SCOPE)
    get_filename_component(LINKER_SCRIPT "${ISA}/${PLATFORM}/layout.ld" ABSOLUTE)
    SET(PLATFORM_LAYOUT ${LINKER_SCRIPT} PARENT_SCOPE)

    # And specific flags
    SET(ISA_C_FLAGS ${ISA_C_FLAGS} PARENT_SCOPE)
    SET(ISA_ASM_FLAGS ${ISA_ASM_FLAGS} PARENT_SCOPE)
    # ...
ENDFUNCTION(LOAD_PROFILE)

LOAD_PROFILE("i686" "pc")

FILE(GLOB GENERIC_SRCS "*.c")


enable_language(C)
enable_language(ASM-ATT)
MESSAGE(STATUS "Sources " ${PLATFORM_SRCS} " " ${ISA_SRCS} " " ${GENERAL_SRCS})
MESSAGE(STATUS "C FLAGS " ${ISA_C_FLAGS})
MESSAGE(STATUS "ASM Flags" ${ISA_ASM_FLAGS})
ADD_EXECUTABLE(kernel.bin ${PLATFORM_SRCS} ${ISA_SRCS} ${GENERAL_SRCS})

set(CMAKE_ASM-ATT_COMPILE_OBJECT "<CMAKE_ASM-ATT_COMPILER> ${ISA_ASM_FLAGS} ${PLATFORM_ASM_FLAGS} -o <OBJECT> <SOURCE>")
set(CMAKE_C_FLAGS "${ISA_C_FLAGS} ${PLATFORM_C_FLAGS}")


SET_TARGET_PROPERTIES(kernel.bin PROPERTIES LINK_FLAGS "-T ${PLATFORM_LAYOUT} -N ${ISA_LINKER_FLAGS} ${PLATFORM_LINKER_FLAGS}"
        RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_BINARY_DIR}
        RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_BINARY_DIR})